package example;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import jdk.nashorn.internal.parser.JSONParser;

import java.util.Collections;
import java.util.Map;
import java.util.HashMap;


/**
 *  V1 for Rest ??
 *
 *  Event Message should follow the format of proxy integration
 *
 *  V1 sample
 *  https://github.com/awsdocs/aws-lambda-developer-guide/blob/master/sample-apps/java-events/events/apigateway-v1.json
 *
 */
// Handler value: example.HandlerApiGateway
public class HandlerApiGateway implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>{
	Gson gson = new GsonBuilder().setPrettyPrinting().create();
//	@Override
//	public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context)
//	{
//		LambdaLogger logger = context.getLogger();
//		APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
//
//		response.setIsBase64Encoded(false);
//		response.setStatusCode(200);
//		HashMap<String, String> headers = new HashMap<String, String>();
//		headers.put("Content-Type", "text/html");
//		response.setHeaders(headers);
//		response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>"+
//				"<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
//				"</body></html>");
//		// log execution details
//		Util.logEnvironment(event, context, gson);
//		return response;
//	}

	@Override
	public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent apiGatewayProxyRequestEvent, Context context) {

		String requestMessage = null;
		String responseMessage = null;

		APIGatewayProxyResponseEvent apiGatewayProxyResponseEvent = new APIGatewayProxyResponseEvent();
		try {
			String requestString = apiGatewayProxyRequestEvent.getBody();
			System.out.println("requestString: " + requestString );

//			JSONParser parser = new JSONParser();
//			JSONObject requestJsonObject = (JSONObject) parser.parse(requestString);

			Map requestJsonObject = gson.fromJson(requestString, Map.class);

			System.out.println("requestJsonObject:" + requestJsonObject );

			if (requestJsonObject != null) {
				if (requestJsonObject.get("requestMessage") != null) {
					requestMessage = requestJsonObject.get("requestMessage").toString();
				}
			}


			// ------- response -------- //
			Map<String, String> responseBody = new HashMap<String, String>();
			responseBody.put("responseMessage", requestMessage);

//			responseMessage = new JSONObject(responseBody).toJSONString();

			responseMessage = gson.toJson(responseBody);

			generateResponse(apiGatewayProxyResponseEvent, responseMessage);
		} catch (/*Parse*/Exception e) {
			e.printStackTrace();
		}
		return apiGatewayProxyResponseEvent;
	}



	private void generateResponse(APIGatewayProxyResponseEvent response, String requestMessage) {
//		response.setHeaders(Collections.singletonMap("timeStamp", String.valueOf(System.currentTimeMillis())));

		// Headers
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "text/html");
		headers.put("timeStamp", String.valueOf(System.currentTimeMillis()));
		response.setHeaders(headers);

		response.setIsBase64Encoded(false);

		response.setStatusCode(200);
		response.setBody(requestMessage);
	}
}