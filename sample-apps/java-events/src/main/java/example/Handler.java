package example;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2ProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayV2ProxyResponseEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Map;
import java.util.HashMap;


/**
 * V2 - Web Socket, HTTP API ??
 *
 *  V2 sample
 *  https://github.com/awsdocs/aws-lambda-developer-guide/blob/master/sample-apps/java-events/events/apigateway-v2.json
 */
// Handler value: example.Handler
public class Handler implements RequestHandler<APIGatewayV2ProxyRequestEvent, APIGatewayV2ProxyResponseEvent>{
	Gson gson = new GsonBuilder().setPrettyPrinting().create();
//	@Override
//	public APIGatewayV2ProxyResponseEvent handleRequest(APIGatewayV2ProxyRequestEvent event, Context context)
//	{
//		LambdaLogger logger = context.getLogger();
//		APIGatewayV2ProxyResponseEvent response = new APIGatewayV2ProxyResponseEvent();
//		response.setIsBase64Encoded(false);
//		response.setStatusCode(200);
//		HashMap<String, String> headers = new HashMap<String, String>();
//		headers.put("Content-Type", "text/html");
//		response.setHeaders(headers);
//		response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>"+
//				"<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" +
//				"</body></html>");
//		// log execution details
//		Util.logEnvironment(event, context, gson);
//		return response;
//	}

	@Override
	public APIGatewayV2ProxyResponseEvent handleRequest(APIGatewayV2ProxyRequestEvent apiGatewayProxyRequestEvent, Context context) {

		String requestMessage = null;
		String responseMessage = null;

		APIGatewayV2ProxyResponseEvent apiGatewayProxyResponseEvent = new APIGatewayV2ProxyResponseEvent();
		try {
			String requestString = apiGatewayProxyRequestEvent.getBody();
			System.out.println("requestString: " + requestString );

//			JSONParser parser = new JSONParser();
//			JSONObject requestJsonObject = (JSONObject) parser.parse(requestString);

			Map requestJsonObject = gson.fromJson(requestString, Map.class);

			System.out.println("requestJsonObject:" + requestJsonObject );

			if (requestJsonObject != null) {
				if (requestJsonObject.get("requestMessage") != null) {
					requestMessage = requestJsonObject.get("requestMessage").toString();
				}
			}


			// ------- response -------- //
			Map<String, String> responseBody = new HashMap<String, String>();
			responseBody.put("responseMessage", requestMessage);

//			responseMessage = new JSONObject(responseBody).toJSONString();

			responseMessage = gson.toJson(responseBody);

			generateResponse(apiGatewayProxyResponseEvent, responseMessage);
		} catch (/*Parse*/Exception e) {
			e.printStackTrace();
		}
		return apiGatewayProxyResponseEvent;
	}



	private void generateResponse(APIGatewayV2ProxyResponseEvent response, String requestMessage) {
//		response.setHeaders(Collections.singletonMap("timeStamp", String.valueOf(System.currentTimeMillis())));

		// Headers
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "text/html");
		headers.put("timeStamp", String.valueOf(System.currentTimeMillis()));
		response.setHeaders(headers);

		response.setIsBase64Encoded(false);

		response.setStatusCode(200);
		response.setBody(requestMessage);
	}

	public BufferedImage loadImage(){

		BufferedImage buff = null;
		try {
			buff = ImageIO.read(getClass().getResourceAsStream("java-events-servicemap.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		return buff;

	}

}